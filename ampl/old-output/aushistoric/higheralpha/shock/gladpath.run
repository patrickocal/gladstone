#=============================================================================#
# initial and final period for PathTimes (the set over which we iterate)
#=============================================================================#
let PSup := 200;
let PInf := 100;
#=============================================================================#
# are we solving or pulling in prior results? Comment out if solving:
#let toggle_sol := "previous";
# which solver are we using? Comment out to use the default: knitro.
#let solvername := "conopt";
if solvername = "conopt" then option solver conopt;
if solvername = "knitro" then option solver knitro;
option solver ;
option show_stats 1;
#=============================================================================#
# setup for output of results
#=============================================================================#
#option solver conopt;
# for generating a history set shock := "";
let shock := "shock";
let reg := "aus";
let experimentname := "higheralpha";
if shock = "" then let experimentname := (experimentname & "/");
if shock = "shock" then
  let experimentname := (experimentname & "/" & shock & "/");
let filename := ("gladlab"
  & solvername & "-" & PInf & "to" & PSup & "-" & reg & shock);
let outputdir := ("./ampl/output/aushistoric/" & experimentname);
#=============================================================================#
# declare output tables
#=============================================================================#
table res OUT "amplxl"
  (outputdir & filename & ".xlsx") "Results":
  [Regions, Sectors, PathTimes],
  KAP, E_OUT, CON, XPO, YMED_CSUM,
  GROWTH_KAP, GROWTH_OUT,
  LAB, CMED_SEC,
  MPKK, MPLL, MPMM,
  EULER_INTEGRAND, EULER_RATIO;
table aggres OUT "amplxl"
  (outputdir & filename & "-agg" & ".xlsx") "Results":
  [Regions, PathTimes],
  AGG_KAP, AGG_OUT, AGG_CON, AGG_XPO, AGG_YMED_CSUM;
table prcres OUT "amplxl"
  (outputdir & filename & "-prc" & ".xlsx") "Results":
  [Sectors, PathTimes],
  PRC_DOM, DUAL_MKT_CLR;
table prdeps OUT "amplxl"
  (outputdir & filename & "-prdeps" & ".xlsx"):
  [Sectors], A, EPS_OUT;
#-----------------------------------------------------------------------------#
# initial kap and growth factor if starting from a future point in time
#-----------------------------------------------------------------------------#
load amplxl.dll;
load amplcsv.dll;
let datadir := "ampl/data/";
table kapxl IN "amplxl"
  (datadir & "KAP.xlsx") "KAP":
  #(datadir & "KAP-" & PInf & ".xlsx") "Sheet1":
  [Regions, Sectors, PathTimes], KAP;
table Ain IN "amplxl"
(datadir &
"prdeps-gladlab-SHRnoEPS-adaptAandEPSuntils70-PSup200-objsknitro-0-aushistoric.xls"):
  [Sectors], A, EPS_OUT;
read table Ain;
if shock in {"shock", "noshock"} then {
  read table kapxl; #table inkap IN "amplcsv"
};
# to continue the previous loop
#for {r in Regions, i in Sectors} let KAP[r, i, 0] := KAP[r, i, 36];
#(datadir & "KAP.csv"): [Regions, Sectors, PathTimes], KAP;
#read table inkap;
update data;
#-----------------------------------------------------------------------------#
# initial kap and growth factor if starting from scratch
#-----------------------------------------------------------------------------#
#let ALPHA := 101828182846e-11;
#let ALPHA_0 := 101828182846e-11;
#for {r in Regions, i in Sectors}{
#  let KAP[r, i, PInf]
#    := 1;
#    := RAW_KAP_OUT[r, i] / sum{j in Sectors} RAW_KAP_OUT[r, j]
#      + PROP_OUT_PER_SEC[r, i];
#      + 50e-2
#      ;
#};
display KAP;
#=============================================================================#
#-----------solve the model along a given path
#=============================================================================#
for {s in PathTimes}{
  display s, ctime(), outputdir, experimentname, filename;
  #---------------------------------------------------------------------------#
  # the shock
  #---------------------------------------------------------------------------#
  if shock = "shock" then {

    if s = PInf + 1 then {
      let A['C'] := A['C'] * 080e-2;
      let RAW_XPO_JOUT['GLD', 'C']
        := RAW_XPO_JOUT['GLD', 'C'] * 3 / 4; 
      let RAW_MED_FLW['GLD', 'B', 'C']
        := RAW_MED_FLW['GLD', 'B', 'C'] * 090e-2;
      let RAW_MED_FLW['GLD', 'C', 'C']
        := RAW_MED_FLW['GLD', 'C', 'C'] * 040e-2;
      let RAW_MED_FLW['GLD', 'D', 'C']
        := RAW_MED_FLW['GLD', 'D', 'C'] * 15e-2;
      let KAP['GLD', 'C', s] := KAP['GLD', 'C', s] * 3 / 4;
    };
  };
  #-----------RAS and calibration
  if shock = "" then {
    if 2 < s < 70 then {
      for {r in Regions, i in Sectors} {
        if EULER_RATIO[r, i, s - 1] < 95e-2 then {
          display i, A[i];
          let A[i] := A[i] * 99e-2;
        };
        if EULER_RATIO[r, i, s - 1] > 105e-2 then {
          display i, A[i];
          let A[i] := A[i] * 101e-2;
        };
        if EULER_RATIO[r, i, s - 1] > 110e-2 then {
          display i, A[i];
          let A[i] := A[i] * 101e-2;
        };
        if EULER_RATIO[r, i, s - 1] > 120e-2 then {
          display i, A[i];
          let A[i] := A[i] * 101e-2;
        };
        if EULER_RATIO[r, i, s - 1] > 130e-2 then {
          display i, A[i];
          let A[i] := A[i] * 101e-2;
        };
      };
    };
  };
  if shock = "" then {
    if 1 < s < 71 then {
      for {r in Regions, i in Sectors} {
        if DIFF_PROP_OUT[r, i, s - 1] < -1e-2 then {
          display i, EPS_OUT[i];
          let EPS_OUT[i] := EPS_OUT[i] * 997e-3;
        };
        if DIFF_PROP_OUT[r, i, s - 1] > 1e-2 then {
          display i, EPS_OUT[i];
          let EPS_OUT[i] := EPS_OUT[i] * 1003e-3;
        };
      };
    };
  };

  # see glad-mcmc.run
  #-----------update kapital (CJ call this the simulation step)
  fix {r in Regions, j in Sectors} kap[r, j, LInf] := KAP[r, j, s];
  let ALPHA := ALPHA_0 ** s;
  
  #-----------display some parameter values:
  display PHI_ADJ['A'],
  LabSup, LSup, ALPHA_0, ALPHA, BETA, A['O'],
  SHR_CON['GLD', 'O'], SHR_LAB['GLD', 'O'],
  SHR_INV_CES['GLD', 'A', 'O'], DELTA['O'];
  display A_CON, A_INV, A_MED, A_VAL, A_LAB['GLD', 0],
  EPS_INV, EPS_MED, EPS_CON, EPS_OUT, EPS_LAB,
  RHO_INV,  RHO_MED,  RHO_CON, RHO_OUT['A'], RHO_LAB,
  SCALE_CON, SCALE_INV, SCALE_MED, SCALE_OUT, SCALE_LAB,
  SCALE_CMED, SCALE_CINV;
  #-----------in this algorithm other variables automatically get warm start
  #  display E_out['GLD', 'O', LInf], con['GLD', 'O', LInf];
  #-----------set and solve the plan for start time s
  objective pres_disc_val[s];
  #===========================================================================#
  # setup for output of nl and sol files
  #===========================================================================#
  let InstanceName := (outputdir & filename & s);
  display s;
  #-----------default: call the solver
  if toggle_sol = "solve" then {
    #-------write out an nl file this means that a sol file is also generated
    write ("b" & InstanceName);
    #-------actually solve
    solve;
    #-------store solve times to ..results.txt
    display s, ctime(), _ampl_elapsed_time, _total_solve_time,
      _total_solve_system_time, _total_solve_user_time
      >> (InstanceName & "-results.txt");
  };
  #-----------alternatively, pull prior results into ampl:
  if toggle_sol = "previous" then solution (InstanceName & ".sol");
  #-----------display step values
  display E_out["GLD", "O", LInf], con["GLD", "O", LInf],
  inv_sec["GLD", "O", LInf], kap["GLD", "O", LInf],
  lab["GLD", "O", LInf], kap_transition["GLD", "O", LInf],
  market_clearing["O", LInf];
  for {r in Regions, i in Sectors}{
  #-----------save actual path values of variables to parameter
    let CON[r, i, s] := con[r, i, LInf];
    let INV_SEC[r, i, s] := inv_sec[r, i, LInf];
    let INV_CSUM[r, i, s] := sum{j in Sectors} inv[r, i, j, LInf];
    let MED_CSUM[r, i, s] := sum{j in Sectors} med[r, i, j, LInf];
    let LAB[r, i, s] := lab[r, i, LInf];
    let E_OUT[r, i, s] := E_out[r, i, LInf];
    let DOM[r, i, s] := dom[r, i, LInf];
    let SHR_DOM[r, i, s] := shr_dom[r, i, LInf];
    let ADJ_COST_KAP[r, i, s] := adj_cost_kap[r, i, LInf];
    let KAP[r, i, s + 1] := kap[r, i, LInf + 1];
    let DUAL_KAP[r, i, s] := kap_transition[r, i, LInf];
    let XPO[r, i, s] := xpo[r, i, LInf];
    let YMED_CSUM[r, i, s] := sum{j in Sectors} ymed[r, i, j, LInf];
    let CMED_SEC[r, i, s] := cmed_sec_CES[r, i, LInf];
    let MPROD_FAC[r, i, s] := mprod_fac[r, i, LInf];
    let MPKK[r, i, s] := mpkk[r, i, LInf];
    let MPLL[r, i, s] := mpll[r, i, LInf];
    let MPMM[r, i, s] := mpmm[r, i, LInf];
    let AGG_KAP[r, s] := sum{ii in Sectors} kap[r, ii, LInf];
    let AGG_OUT[r, s] := sum{ii in Sectors} E_out[r, ii, LInf];
    let AGG_CON[r, s] := sum{ii in Sectors} con[r, ii, LInf];
    let AGG_XPO[r, s] := sum{ii in Sectors} xpo[r, ii, LInf];
    let AGG_YMED_CSUM[r, s] :=
      sum{ii in Sectors}(sum{j in Sectors} ymed[r, ii, j, LInf]);
    let PRC_DOM[i, s] := prc_dom[i, LInf];
    for {j in Sectors, ii in Sectors}{
    let JAC_ID[r, i, j, ii, s] := inv[r, i, j, LInf] * inv[r, ii, ii, LInf]
          * SHR_INV_CES[r, i, ii] * SHR_INV_CES[r, ii, j] 
        - inv[r, i, ii, LInf] * inv[r, ii, j, LInf]
          * SHR_INV_CES[r, i, j] * SHR_INV_CES[r, ii, ii];
    };
  };
  #    let TAIL_SHR_CON := (sum{r in Regions, i in Sectors} CON[r, i, s])
  #      / (sum{r in Regions, i in Sectors} E_OUT[r, i, s]);
  #display E_OUT, CON, INV_CSUM, MED_CSUM, ADJ_COST_KAP, LAB, KAP;
  #display max {r in Regions, i in Sectors} DUAL_KAP[r, i, s];
  #display min {r in Regions, i in Sectors} DUAL_KAP[r, i, s];
  for {i in Sectors}{
  #-----------save actual path values of market clearing to parameter
    let MKT_CLR[i, s] := sum{rr in Regions}(
      DOM[rr, i, s] 
      - CON[rr, i, s]
      - INV_CSUM[rr, i, s] 
      - MED_CSUM[rr, i, s]
      - ADJ_COST_KAP[rr, i, s]
      );
    let DUAL_MKT_CLR[i, s] := market_clearing[i, LInf];
  };
  #-----------growth rate of capital as a parameter
  for {r in Regions, i in Sectors}{
    let GROWTH_KAP[r, i, s] := (KAP[r, i, s + 1] - KAP[r, i, s]) / KAP[r, i, s];
    if s > PInf then 
    let GROWTH_OUT[r, i, s] :=
      (E_OUT[r, i, s] - E_OUT[r, i, s - 1]) / E_OUT[r, i, s - 1];
   
  #-----------Euler integrand for Cobb--Douglas production
    #let EULER_INTEGRAND[r, i, s] :=  DUAL_KAP[r, i, s] * (1 - DELTA[i]) 
    #  + DUAL_MKT_CLR[i, s] * (
    #    SHR_KAP_OUT[i] * (KAP[r, i, s] / LAB[r, i, s]) ** (SHR_KAP_OUT[i] - 1)
    #    - PHI_ADJ[i] * (2 * GROWTH_KAP[r, i, s] + GROWTH_KAP[r, i, s] ** 2)
    #  );
  #-----------Euler integrand for CES production
    let EULER_INTEGRAND[r, i, s] := DUAL_KAP[r, i, s] * (1 - DELTA[i]) 
      + DUAL_MKT_CLR[i, s] * (
        SHR_KAP_OUT_CES[r, i] * KAP[r, i, s] ** (RHO_OUT[i] - 1)
          * SCALE_OUT * A[i] * SHR_DOM[r, i, s]
            * (DOM[r, i, s] / (A[i] * SHR_DOM[r, i, s]))
              ** (1 - RHO_OUT[i] / SCALE_OUT)
        - PHI_ADJ[i] * (2 * GROWTH_KAP[r, i, s] + GROWTH_KAP[r, i, s] ** 2)
      );
    if s > PInf then 
    let EULER_RATIO[r, i, s] 
        := BETA * EULER_INTEGRAND[r, i, s] / DUAL_KAP[r, i, s - 1];
  };
  write table res;
  write table aggres;
  write table prcres;
  write table prdeps;
  #write table kp;
  display GROWTH_KAP, GROWTH_OUT, EULER_INTEGRAND, EULER_RATIO,
    min{r in Regions, i in Sectors} E_OUT[r, i, s],
    max{r in Regions, i in Sectors} E_OUT[r, i, s],
    min{r in Regions, i in Sectors} CON[r, i, s],
    max{r in Regions, i in Sectors} CON[r, i, s],
    min{r in Regions, i in Sectors} INV_CSUM[r, i, s],
    max{r in Regions, i in Sectors} INV_CSUM[r, i, s],
    min{r in Regions, i in Sectors} MED_CSUM[r, i, s],
    max{r in Regions, i in Sectors} MED_CSUM[r, i, s],
    max{r in Regions, i in Sectors} ADJ_COST_KAP[r, i, s],
    max{i in Sectors} abs(MKT_CLR[i, s]),
    min{i in Sectors} DUAL_MKT_CLR[i, s],
    max{i in Sectors} DUAL_MKT_CLR[i, s],
    min{r in Regions, i in Sectors} LAB[r, i, s],
    max{r in Regions, i in Sectors} LAB[r, i, s],
    min{r in Regions, i in Sectors} KAP[r, i, s + 1],
    max{r in Regions, i in Sectors} KAP[r, i, s + 1],
    min{r in Regions, i in Sectors} GROWTH_KAP[r, i, s],
    max{r in Regions, i in Sectors} GROWTH_KAP[r, i, s],
    min{r in Regions, i in Sectors} DUAL_KAP[r, i, s],
    min{r in Regions, i in Sectors} XPO[r, i, s],
    max{r in Regions, i in Sectors} XPO[r, i, s],
    utility, tail_val, pres_disc_val[s],
    (sum{r in Regions, i in Sectors} con[r, i, LInf])
      / (sum{r in Regions, i in Sectors} E_out[r, i, LInf]),
    KAP['GLD', 'O', s] / E_OUT['GLD', 'O', s],
    max{r in Regions, i in Sectors, j in Sectors, ii in Sectors}
      abs(JAC_ID[r, i, j, ii, s]),
    max{r in Regions} MAX_DIFF_PROP_OUT[r, s],
    s, _ampl_elapsed_time, _total_solve_time, ctime();
  # for {r in Regions, i in Sectors}{
  # if s > PInf then display EULER_RATIO[r, i, s] - EULER_RATIO[r, i, s - 1];
  # };
};
